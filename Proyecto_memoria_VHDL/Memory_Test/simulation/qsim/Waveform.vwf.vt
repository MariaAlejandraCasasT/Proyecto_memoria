// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2022 10:17:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Memory_Test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Memory_Test_vlg_sample_tst(
	Address,
	clock,
	data_in1,
	port_in_0,
	port_in_1,
	port_in_2,
	port_in_3,
	port_in_4,
	port_in_5,
	port_in_6,
	port_in_7,
	port_in_8,
	port_in_9,
	port_in_010,
	port_in_011,
	port_in_012,
	port_in_013,
	port_in_014,
	port_in_015,
	reset,
	writen,
	sampler_tx
);
input [7:0] Address;
input  clock;
input [7:0] data_in1;
input [7:0] port_in_0;
input [7:0] port_in_1;
input [7:0] port_in_2;
input [7:0] port_in_3;
input [7:0] port_in_4;
input [7:0] port_in_5;
input [7:0] port_in_6;
input [7:0] port_in_7;
input [7:0] port_in_8;
input [7:0] port_in_9;
input [7:0] port_in_010;
input [7:0] port_in_011;
input [7:0] port_in_012;
input [7:0] port_in_013;
input [7:0] port_in_014;
input [7:0] port_in_015;
input  reset;
input  writen;
output sampler_tx;

reg sample;
time current_time;
always @(Address or clock or data_in1 or port_in_0 or port_in_1 or port_in_2 or port_in_3 or port_in_4 or port_in_5 or port_in_6 or port_in_7 or port_in_8 or port_in_9 or port_in_010 or port_in_011 or port_in_012 or port_in_013 or port_in_014 or port_in_015 or reset or writen)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Memory_Test_vlg_check_tst (
	Display1,
	Display2,
	Display3,
	Display4,
	sampler_rx
);
input [6:0] Display1;
input [6:0] Display2;
input [6:0] Display3;
input [6:0] Display4;
input sampler_rx;

reg [6:0] Display1_expected;
reg [6:0] Display2_expected;
reg [6:0] Display3_expected;
reg [6:0] Display4_expected;

reg [6:0] Display1_prev;
reg [6:0] Display2_prev;
reg [6:0] Display3_prev;
reg [6:0] Display4_prev;

reg [6:0] Display1_expected_prev;
reg [6:0] Display2_expected_prev;
reg [6:0] Display3_expected_prev;
reg [6:0] Display4_expected_prev;

reg [6:0] last_Display1_exp;
reg [6:0] last_Display2_exp;
reg [6:0] last_Display3_exp;
reg [6:0] last_Display4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Display1_prev = Display1;
	Display2_prev = Display2;
	Display3_prev = Display3;
	Display4_prev = Display4;
end

// update expected /o prevs

always @(trigger)
begin
	Display1_expected_prev = Display1_expected;
	Display2_expected_prev = Display2_expected;
	Display3_expected_prev = Display3_expected;
	Display4_expected_prev = Display4_expected;
end


// expected Display1[ 6 ]
initial
begin
	Display1_expected[6] = 1'bX;
end 
// expected Display1[ 5 ]
initial
begin
	Display1_expected[5] = 1'bX;
end 
// expected Display1[ 4 ]
initial
begin
	Display1_expected[4] = 1'bX;
end 
// expected Display1[ 3 ]
initial
begin
	Display1_expected[3] = 1'bX;
end 
// expected Display1[ 2 ]
initial
begin
	Display1_expected[2] = 1'bX;
end 
// expected Display1[ 1 ]
initial
begin
	Display1_expected[1] = 1'bX;
end 
// expected Display1[ 0 ]
initial
begin
	Display1_expected[0] = 1'bX;
end 
// expected Display2[ 6 ]
initial
begin
	Display2_expected[6] = 1'bX;
end 
// expected Display2[ 5 ]
initial
begin
	Display2_expected[5] = 1'bX;
end 
// expected Display2[ 4 ]
initial
begin
	Display2_expected[4] = 1'bX;
end 
// expected Display2[ 3 ]
initial
begin
	Display2_expected[3] = 1'bX;
end 
// expected Display2[ 2 ]
initial
begin
	Display2_expected[2] = 1'bX;
end 
// expected Display2[ 1 ]
initial
begin
	Display2_expected[1] = 1'bX;
end 
// expected Display2[ 0 ]
initial
begin
	Display2_expected[0] = 1'bX;
end 
// expected Display3[ 6 ]
initial
begin
	Display3_expected[6] = 1'bX;
end 
// expected Display3[ 5 ]
initial
begin
	Display3_expected[5] = 1'bX;
end 
// expected Display3[ 4 ]
initial
begin
	Display3_expected[4] = 1'bX;
end 
// expected Display3[ 3 ]
initial
begin
	Display3_expected[3] = 1'bX;
end 
// expected Display3[ 2 ]
initial
begin
	Display3_expected[2] = 1'bX;
end 
// expected Display3[ 1 ]
initial
begin
	Display3_expected[1] = 1'bX;
end 
// expected Display3[ 0 ]
initial
begin
	Display3_expected[0] = 1'bX;
end 
// expected Display4[ 6 ]
initial
begin
	Display4_expected[6] = 1'bX;
end 
// expected Display4[ 5 ]
initial
begin
	Display4_expected[5] = 1'bX;
end 
// expected Display4[ 4 ]
initial
begin
	Display4_expected[4] = 1'bX;
end 
// expected Display4[ 3 ]
initial
begin
	Display4_expected[3] = 1'bX;
end 
// expected Display4[ 2 ]
initial
begin
	Display4_expected[2] = 1'bX;
end 
// expected Display4[ 1 ]
initial
begin
	Display4_expected[1] = 1'bX;
end 
// expected Display4[ 0 ]
initial
begin
	Display4_expected[0] = 1'bX;
end 
// generate trigger
always @(Display1_expected or Display1 or Display2_expected or Display2 or Display3_expected or Display3 or Display4_expected or Display4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Display1 = %b | expected Display2 = %b | expected Display3 = %b | expected Display4 = %b | ",Display1_expected_prev,Display2_expected_prev,Display3_expected_prev,Display4_expected_prev);
	$display("| real Display1 = %b | real Display2 = %b | real Display3 = %b | real Display4 = %b | ",Display1_prev,Display2_prev,Display3_prev,Display4_prev);
`endif
	if (
		( Display1_expected_prev[0] !== 1'bx ) && ( Display1_prev[0] !== Display1_expected_prev[0] )
		&& ((Display1_expected_prev[0] !== last_Display1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[0] = Display1_expected_prev[0];
	end
	if (
		( Display1_expected_prev[1] !== 1'bx ) && ( Display1_prev[1] !== Display1_expected_prev[1] )
		&& ((Display1_expected_prev[1] !== last_Display1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[1] = Display1_expected_prev[1];
	end
	if (
		( Display1_expected_prev[2] !== 1'bx ) && ( Display1_prev[2] !== Display1_expected_prev[2] )
		&& ((Display1_expected_prev[2] !== last_Display1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[2] = Display1_expected_prev[2];
	end
	if (
		( Display1_expected_prev[3] !== 1'bx ) && ( Display1_prev[3] !== Display1_expected_prev[3] )
		&& ((Display1_expected_prev[3] !== last_Display1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[3] = Display1_expected_prev[3];
	end
	if (
		( Display1_expected_prev[4] !== 1'bx ) && ( Display1_prev[4] !== Display1_expected_prev[4] )
		&& ((Display1_expected_prev[4] !== last_Display1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[4] = Display1_expected_prev[4];
	end
	if (
		( Display1_expected_prev[5] !== 1'bx ) && ( Display1_prev[5] !== Display1_expected_prev[5] )
		&& ((Display1_expected_prev[5] !== last_Display1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[5] = Display1_expected_prev[5];
	end
	if (
		( Display1_expected_prev[6] !== 1'bx ) && ( Display1_prev[6] !== Display1_expected_prev[6] )
		&& ((Display1_expected_prev[6] !== last_Display1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[6] = Display1_expected_prev[6];
	end
	if (
		( Display2_expected_prev[0] !== 1'bx ) && ( Display2_prev[0] !== Display2_expected_prev[0] )
		&& ((Display2_expected_prev[0] !== last_Display2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[0] = Display2_expected_prev[0];
	end
	if (
		( Display2_expected_prev[1] !== 1'bx ) && ( Display2_prev[1] !== Display2_expected_prev[1] )
		&& ((Display2_expected_prev[1] !== last_Display2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[1] = Display2_expected_prev[1];
	end
	if (
		( Display2_expected_prev[2] !== 1'bx ) && ( Display2_prev[2] !== Display2_expected_prev[2] )
		&& ((Display2_expected_prev[2] !== last_Display2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[2] = Display2_expected_prev[2];
	end
	if (
		( Display2_expected_prev[3] !== 1'bx ) && ( Display2_prev[3] !== Display2_expected_prev[3] )
		&& ((Display2_expected_prev[3] !== last_Display2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[3] = Display2_expected_prev[3];
	end
	if (
		( Display2_expected_prev[4] !== 1'bx ) && ( Display2_prev[4] !== Display2_expected_prev[4] )
		&& ((Display2_expected_prev[4] !== last_Display2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[4] = Display2_expected_prev[4];
	end
	if (
		( Display2_expected_prev[5] !== 1'bx ) && ( Display2_prev[5] !== Display2_expected_prev[5] )
		&& ((Display2_expected_prev[5] !== last_Display2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[5] = Display2_expected_prev[5];
	end
	if (
		( Display2_expected_prev[6] !== 1'bx ) && ( Display2_prev[6] !== Display2_expected_prev[6] )
		&& ((Display2_expected_prev[6] !== last_Display2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[6] = Display2_expected_prev[6];
	end
	if (
		( Display3_expected_prev[0] !== 1'bx ) && ( Display3_prev[0] !== Display3_expected_prev[0] )
		&& ((Display3_expected_prev[0] !== last_Display3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[0] = Display3_expected_prev[0];
	end
	if (
		( Display3_expected_prev[1] !== 1'bx ) && ( Display3_prev[1] !== Display3_expected_prev[1] )
		&& ((Display3_expected_prev[1] !== last_Display3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[1] = Display3_expected_prev[1];
	end
	if (
		( Display3_expected_prev[2] !== 1'bx ) && ( Display3_prev[2] !== Display3_expected_prev[2] )
		&& ((Display3_expected_prev[2] !== last_Display3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[2] = Display3_expected_prev[2];
	end
	if (
		( Display3_expected_prev[3] !== 1'bx ) && ( Display3_prev[3] !== Display3_expected_prev[3] )
		&& ((Display3_expected_prev[3] !== last_Display3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[3] = Display3_expected_prev[3];
	end
	if (
		( Display3_expected_prev[4] !== 1'bx ) && ( Display3_prev[4] !== Display3_expected_prev[4] )
		&& ((Display3_expected_prev[4] !== last_Display3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[4] = Display3_expected_prev[4];
	end
	if (
		( Display3_expected_prev[5] !== 1'bx ) && ( Display3_prev[5] !== Display3_expected_prev[5] )
		&& ((Display3_expected_prev[5] !== last_Display3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[5] = Display3_expected_prev[5];
	end
	if (
		( Display3_expected_prev[6] !== 1'bx ) && ( Display3_prev[6] !== Display3_expected_prev[6] )
		&& ((Display3_expected_prev[6] !== last_Display3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[6] = Display3_expected_prev[6];
	end
	if (
		( Display4_expected_prev[0] !== 1'bx ) && ( Display4_prev[0] !== Display4_expected_prev[0] )
		&& ((Display4_expected_prev[0] !== last_Display4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[0] = Display4_expected_prev[0];
	end
	if (
		( Display4_expected_prev[1] !== 1'bx ) && ( Display4_prev[1] !== Display4_expected_prev[1] )
		&& ((Display4_expected_prev[1] !== last_Display4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[1] = Display4_expected_prev[1];
	end
	if (
		( Display4_expected_prev[2] !== 1'bx ) && ( Display4_prev[2] !== Display4_expected_prev[2] )
		&& ((Display4_expected_prev[2] !== last_Display4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[2] = Display4_expected_prev[2];
	end
	if (
		( Display4_expected_prev[3] !== 1'bx ) && ( Display4_prev[3] !== Display4_expected_prev[3] )
		&& ((Display4_expected_prev[3] !== last_Display4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[3] = Display4_expected_prev[3];
	end
	if (
		( Display4_expected_prev[4] !== 1'bx ) && ( Display4_prev[4] !== Display4_expected_prev[4] )
		&& ((Display4_expected_prev[4] !== last_Display4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[4] = Display4_expected_prev[4];
	end
	if (
		( Display4_expected_prev[5] !== 1'bx ) && ( Display4_prev[5] !== Display4_expected_prev[5] )
		&& ((Display4_expected_prev[5] !== last_Display4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[5] = Display4_expected_prev[5];
	end
	if (
		( Display4_expected_prev[6] !== 1'bx ) && ( Display4_prev[6] !== Display4_expected_prev[6] )
		&& ((Display4_expected_prev[6] !== last_Display4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[6] = Display4_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Memory_Test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] Address;
reg clock;
reg [7:0] data_in1;
reg [7:0] port_in_0;
reg [7:0] port_in_1;
reg [7:0] port_in_2;
reg [7:0] port_in_3;
reg [7:0] port_in_4;
reg [7:0] port_in_5;
reg [7:0] port_in_6;
reg [7:0] port_in_7;
reg [7:0] port_in_8;
reg [7:0] port_in_9;
reg [7:0] port_in_010;
reg [7:0] port_in_011;
reg [7:0] port_in_012;
reg [7:0] port_in_013;
reg [7:0] port_in_014;
reg [7:0] port_in_015;
reg reset;
reg writen;
// wires                                               
wire [6:0] Display1;
wire [6:0] Display2;
wire [6:0] Display3;
wire [6:0] Display4;

wire sampler;                             

// assign statements (if any)                          
Memory_Test i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.clock(clock),
	.data_in1(data_in1),
	.Display1(Display1),
	.Display2(Display2),
	.Display3(Display3),
	.Display4(Display4),
	.port_in_0(port_in_0),
	.port_in_1(port_in_1),
	.port_in_2(port_in_2),
	.port_in_3(port_in_3),
	.port_in_4(port_in_4),
	.port_in_5(port_in_5),
	.port_in_6(port_in_6),
	.port_in_7(port_in_7),
	.port_in_8(port_in_8),
	.port_in_9(port_in_9),
	.port_in_010(port_in_010),
	.port_in_011(port_in_011),
	.port_in_012(port_in_012),
	.port_in_013(port_in_013),
	.port_in_014(port_in_014),
	.port_in_015(port_in_015),
	.reset(reset),
	.writen(writen)
);
// Address[ 7 ]
initial
begin
	Address[7] = 1'b0;
	Address[7] = #120000 1'b1;
end 
// Address[ 6 ]
initial
begin
	Address[6] = 1'b0;
	Address[6] = #400000 1'b1;
end 
// Address[ 5 ]
initial
begin
	Address[5] = 1'b0;
	Address[5] = #420000 1'b1;
end 
// Address[ 4 ]
initial
begin
	Address[4] = 1'b0;
	Address[4] = #400000 1'b1;
	Address[4] = #20000 1'b0;
	Address[4] = #320000 1'b1;
end 
// Address[ 3 ]
initial
begin
	Address[3] = 1'b0;
	Address[3] = #240000 1'b1;
	Address[3] = #20000 1'b0;
	Address[3] = #120000 1'b1;
	Address[3] = #40000 1'b0;
	Address[3] = #160000 1'b1;
	Address[3] = #160000 1'b0;
	Address[3] = #160000 1'b1;
	Address[3] = #90000 1'b0;
end 
// Address[ 2 ]
initial
begin
	Address[2] = 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #60000 1'b0;
	Address[2] = #40000 1'b1;
	Address[2] = #80000 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #80000 1'b0;
	Address[2] = #20000 1'b1;
	# 20000;
	repeat(3)
	begin
		Address[2] = 1'b0;
		Address[2] = #80000 1'b1;
		# 80000;
	end
	Address[2] = 1'b0;
	Address[2] = #80000 1'b1;
end 
// Address[ 1 ]
initial
begin
	Address[1] = 1'b0;
	Address[1] = #20000 1'b1;
	Address[1] = #40000 1'b0;
	Address[1] = #40000 1'b1;
	Address[1] = #60000 1'b0;
	Address[1] = #40000 1'b1;
	Address[1] = #40000 1'b0;
	Address[1] = #20000 1'b1;
	Address[1] = #40000 1'b0;
	Address[1] = #40000 1'b1;
	Address[1] = #40000 1'b0;
	Address[1] = #20000 1'b1;
	# 20000;
	repeat(6)
	begin
		Address[1] = 1'b0;
		Address[1] = #40000 1'b1;
		# 40000;
	end
	Address[1] = 1'b0;
	Address[1] = #40000 1'b1;
	Address[1] = #40000 1'b0;
	Address[1] = #10000 1'b1;
end 
// Address[ 0 ]
initial
begin
	repeat(2)
	begin
		Address[0] = 1'b1;
		Address[0] = #20000 1'b0;
		# 20000;
	end
	Address[0] = 1'b1;
	Address[0] = #20000 1'b0;
	Address[0] = #40000 1'b1;
	# 20000;
	repeat(2)
	begin
		Address[0] = 1'b0;
		Address[0] = #20000 1'b1;
		# 20000;
	end
	Address[0] = 1'b0;
	Address[0] = #40000 1'b1;
	Address[0] = #20000 1'b0;
	Address[0] = #20000 1'b1;
	Address[0] = #20000 1'b0;
	Address[0] = #20000 1'b1;
	Address[0] = #20000 1'b0;
	# 20000;
	repeat(13)
	begin
		Address[0] = 1'b1;
		Address[0] = #20000 1'b0;
		# 20000;
	end
	Address[0] = 1'b1;
	Address[0] = #20000 1'b0;
	Address[0] = #20000 1'b1;
	Address[0] = #20000 1'b0;
end 

// writen
initial
begin
	writen = 1'b0;
	writen = #120000 1'b1;
	writen = #140000 1'b0;
	writen = #140000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #400000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// data_in1[ 7 ]
initial
begin
	data_in1[7] = 1'b1;
end 
// data_in1[ 6 ]
initial
begin
	data_in1[6] = 1'b0;
	data_in1[6] = #640000 1'b1;
end 
// data_in1[ 5 ]
initial
begin
	data_in1[5] = 1'b1;
	data_in1[5] = #640000 1'b0;
end 
// data_in1[ 4 ]
initial
begin
	data_in1[4] = 1'b0;
	data_in1[4] = #320000 1'b1;
	data_in1[4] = #320000 1'b0;
	data_in1[4] = #320000 1'b1;
end 
// data_in1[ 3 ]
initial
begin
	repeat(3)
	begin
		data_in1[3] = 1'b0;
		data_in1[3] = #160000 1'b1;
		# 160000;
	end
	data_in1[3] = 1'b0;
end 
// data_in1[ 2 ]
initial
begin
	repeat(6)
	begin
		data_in1[2] = 1'b0;
		data_in1[2] = #80000 1'b1;
		# 80000;
	end
	data_in1[2] = 1'b0;
end 
// data_in1[ 1 ]
initial
begin
	repeat(12)
	begin
		data_in1[1] = 1'b0;
		data_in1[1] = #40000 1'b1;
		# 40000;
	end
	data_in1[1] = 1'b0;
end 
// data_in1[ 0 ]
always
begin
	data_in1[0] = 1'b0;
	data_in1[0] = #20000 1'b1;
	#20000;
end 
// port_in_0[ 7 ]
initial
begin
	port_in_0[7] = 1'b0;
end 
// port_in_0[ 6 ]
initial
begin
	port_in_0[6] = 1'b0;
end 
// port_in_0[ 5 ]
initial
begin
	port_in_0[5] = 1'b0;
end 
// port_in_0[ 4 ]
initial
begin
	port_in_0[4] = 1'b0;
end 
// port_in_0[ 3 ]
initial
begin
	port_in_0[3] = 1'b0;
end 
// port_in_0[ 2 ]
initial
begin
	port_in_0[2] = 1'b0;
end 
// port_in_0[ 1 ]
initial
begin
	port_in_0[1] = 1'b0;
end 
// port_in_0[ 0 ]
initial
begin
	port_in_0[0] = 1'b0;
end 
// port_in_1[ 7 ]
initial
begin
	port_in_1[7] = 1'b0;
end 
// port_in_1[ 6 ]
initial
begin
	port_in_1[6] = 1'b0;
end 
// port_in_1[ 5 ]
initial
begin
	port_in_1[5] = 1'b0;
end 
// port_in_1[ 4 ]
initial
begin
	port_in_1[4] = 1'b0;
end 
// port_in_1[ 3 ]
initial
begin
	port_in_1[3] = 1'b0;
end 
// port_in_1[ 2 ]
initial
begin
	port_in_1[2] = 1'b0;
end 
// port_in_1[ 1 ]
initial
begin
	port_in_1[1] = 1'b0;
end 
// port_in_1[ 0 ]
initial
begin
	port_in_1[0] = 1'b1;
end 
// port_in_2[ 7 ]
initial
begin
	port_in_2[7] = 1'b0;
end 
// port_in_2[ 6 ]
initial
begin
	port_in_2[6] = 1'b0;
end 
// port_in_2[ 5 ]
initial
begin
	port_in_2[5] = 1'b0;
end 
// port_in_2[ 4 ]
initial
begin
	port_in_2[4] = 1'b0;
end 
// port_in_2[ 3 ]
initial
begin
	port_in_2[3] = 1'b0;
end 
// port_in_2[ 2 ]
initial
begin
	port_in_2[2] = 1'b0;
end 
// port_in_2[ 1 ]
initial
begin
	port_in_2[1] = 1'b1;
end 
// port_in_2[ 0 ]
initial
begin
	port_in_2[0] = 1'b0;
end 
// port_in_3[ 7 ]
initial
begin
	port_in_3[7] = 1'b0;
end 
// port_in_3[ 6 ]
initial
begin
	port_in_3[6] = 1'b0;
end 
// port_in_3[ 5 ]
initial
begin
	port_in_3[5] = 1'b0;
end 
// port_in_3[ 4 ]
initial
begin
	port_in_3[4] = 1'b0;
end 
// port_in_3[ 3 ]
initial
begin
	port_in_3[3] = 1'b0;
end 
// port_in_3[ 2 ]
initial
begin
	port_in_3[2] = 1'b0;
end 
// port_in_3[ 1 ]
initial
begin
	port_in_3[1] = 1'b1;
end 
// port_in_3[ 0 ]
initial
begin
	port_in_3[0] = 1'b1;
end 
// port_in_4[ 7 ]
initial
begin
	port_in_4[7] = 1'b0;
end 
// port_in_4[ 6 ]
initial
begin
	port_in_4[6] = 1'b0;
end 
// port_in_4[ 5 ]
initial
begin
	port_in_4[5] = 1'b0;
end 
// port_in_4[ 4 ]
initial
begin
	port_in_4[4] = 1'b0;
end 
// port_in_4[ 3 ]
initial
begin
	port_in_4[3] = 1'b0;
end 
// port_in_4[ 2 ]
initial
begin
	port_in_4[2] = 1'b1;
end 
// port_in_4[ 1 ]
initial
begin
	port_in_4[1] = 1'b0;
end 
// port_in_4[ 0 ]
initial
begin
	port_in_4[0] = 1'b0;
end 
// port_in_5[ 7 ]
initial
begin
	port_in_5[7] = 1'b0;
end 
// port_in_5[ 6 ]
initial
begin
	port_in_5[6] = 1'b0;
end 
// port_in_5[ 5 ]
initial
begin
	port_in_5[5] = 1'b0;
end 
// port_in_5[ 4 ]
initial
begin
	port_in_5[4] = 1'b0;
end 
// port_in_5[ 3 ]
initial
begin
	port_in_5[3] = 1'b0;
end 
// port_in_5[ 2 ]
initial
begin
	port_in_5[2] = 1'b1;
end 
// port_in_5[ 1 ]
initial
begin
	port_in_5[1] = 1'b0;
end 
// port_in_5[ 0 ]
initial
begin
	port_in_5[0] = 1'b1;
end 
// port_in_6[ 7 ]
initial
begin
	port_in_6[7] = 1'b0;
end 
// port_in_6[ 6 ]
initial
begin
	port_in_6[6] = 1'b0;
end 
// port_in_6[ 5 ]
initial
begin
	port_in_6[5] = 1'b0;
end 
// port_in_6[ 4 ]
initial
begin
	port_in_6[4] = 1'b0;
end 
// port_in_6[ 3 ]
initial
begin
	port_in_6[3] = 1'b0;
end 
// port_in_6[ 2 ]
initial
begin
	port_in_6[2] = 1'b1;
end 
// port_in_6[ 1 ]
initial
begin
	port_in_6[1] = 1'b1;
end 
// port_in_6[ 0 ]
initial
begin
	port_in_6[0] = 1'b0;
end 
// port_in_7[ 7 ]
initial
begin
	port_in_7[7] = 1'b0;
end 
// port_in_7[ 6 ]
initial
begin
	port_in_7[6] = 1'b0;
end 
// port_in_7[ 5 ]
initial
begin
	port_in_7[5] = 1'b0;
end 
// port_in_7[ 4 ]
initial
begin
	port_in_7[4] = 1'b0;
end 
// port_in_7[ 3 ]
initial
begin
	port_in_7[3] = 1'b0;
end 
// port_in_7[ 2 ]
initial
begin
	port_in_7[2] = 1'b1;
end 
// port_in_7[ 1 ]
initial
begin
	port_in_7[1] = 1'b1;
end 
// port_in_7[ 0 ]
initial
begin
	port_in_7[0] = 1'b1;
end 
// port_in_8[ 7 ]
initial
begin
	port_in_8[7] = 1'b0;
end 
// port_in_8[ 6 ]
initial
begin
	port_in_8[6] = 1'b0;
end 
// port_in_8[ 5 ]
initial
begin
	port_in_8[5] = 1'b0;
end 
// port_in_8[ 4 ]
initial
begin
	port_in_8[4] = 1'b0;
end 
// port_in_8[ 3 ]
initial
begin
	port_in_8[3] = 1'b1;
end 
// port_in_8[ 2 ]
initial
begin
	port_in_8[2] = 1'b0;
end 
// port_in_8[ 1 ]
initial
begin
	port_in_8[1] = 1'b0;
end 
// port_in_8[ 0 ]
initial
begin
	port_in_8[0] = 1'b0;
end 
// port_in_9[ 7 ]
initial
begin
	port_in_9[7] = 1'b0;
end 
// port_in_9[ 6 ]
initial
begin
	port_in_9[6] = 1'b0;
end 
// port_in_9[ 5 ]
initial
begin
	port_in_9[5] = 1'b0;
end 
// port_in_9[ 4 ]
initial
begin
	port_in_9[4] = 1'b0;
end 
// port_in_9[ 3 ]
initial
begin
	port_in_9[3] = 1'b1;
end 
// port_in_9[ 2 ]
initial
begin
	port_in_9[2] = 1'b0;
end 
// port_in_9[ 1 ]
initial
begin
	port_in_9[1] = 1'b0;
end 
// port_in_9[ 0 ]
initial
begin
	port_in_9[0] = 1'b1;
end 
// port_in_010[ 7 ]
initial
begin
	port_in_010[7] = 1'b0;
end 
// port_in_010[ 6 ]
initial
begin
	port_in_010[6] = 1'b0;
end 
// port_in_010[ 5 ]
initial
begin
	port_in_010[5] = 1'b0;
end 
// port_in_010[ 4 ]
initial
begin
	port_in_010[4] = 1'b0;
end 
// port_in_010[ 3 ]
initial
begin
	port_in_010[3] = 1'b1;
end 
// port_in_010[ 2 ]
initial
begin
	port_in_010[2] = 1'b0;
end 
// port_in_010[ 1 ]
initial
begin
	port_in_010[1] = 1'b1;
end 
// port_in_010[ 0 ]
initial
begin
	port_in_010[0] = 1'b0;
end 
// port_in_011[ 7 ]
initial
begin
	port_in_011[7] = 1'b0;
end 
// port_in_011[ 6 ]
initial
begin
	port_in_011[6] = 1'b0;
end 
// port_in_011[ 5 ]
initial
begin
	port_in_011[5] = 1'b0;
end 
// port_in_011[ 4 ]
initial
begin
	port_in_011[4] = 1'b0;
end 
// port_in_011[ 3 ]
initial
begin
	port_in_011[3] = 1'b1;
end 
// port_in_011[ 2 ]
initial
begin
	port_in_011[2] = 1'b0;
end 
// port_in_011[ 1 ]
initial
begin
	port_in_011[1] = 1'b1;
end 
// port_in_011[ 0 ]
initial
begin
	port_in_011[0] = 1'b1;
end 
// port_in_012[ 7 ]
initial
begin
	port_in_012[7] = 1'b0;
end 
// port_in_012[ 6 ]
initial
begin
	port_in_012[6] = 1'b0;
end 
// port_in_012[ 5 ]
initial
begin
	port_in_012[5] = 1'b0;
end 
// port_in_012[ 4 ]
initial
begin
	port_in_012[4] = 1'b0;
end 
// port_in_012[ 3 ]
initial
begin
	port_in_012[3] = 1'b1;
end 
// port_in_012[ 2 ]
initial
begin
	port_in_012[2] = 1'b1;
end 
// port_in_012[ 1 ]
initial
begin
	port_in_012[1] = 1'b0;
end 
// port_in_012[ 0 ]
initial
begin
	port_in_012[0] = 1'b0;
end 
// port_in_013[ 7 ]
initial
begin
	port_in_013[7] = 1'b0;
end 
// port_in_013[ 6 ]
initial
begin
	port_in_013[6] = 1'b0;
end 
// port_in_013[ 5 ]
initial
begin
	port_in_013[5] = 1'b0;
end 
// port_in_013[ 4 ]
initial
begin
	port_in_013[4] = 1'b0;
end 
// port_in_013[ 3 ]
initial
begin
	port_in_013[3] = 1'b1;
end 
// port_in_013[ 2 ]
initial
begin
	port_in_013[2] = 1'b1;
end 
// port_in_013[ 1 ]
initial
begin
	port_in_013[1] = 1'b0;
end 
// port_in_013[ 0 ]
initial
begin
	port_in_013[0] = 1'b1;
end 
// port_in_014[ 7 ]
initial
begin
	port_in_014[7] = 1'b0;
end 
// port_in_014[ 6 ]
initial
begin
	port_in_014[6] = 1'b0;
end 
// port_in_014[ 5 ]
initial
begin
	port_in_014[5] = 1'b0;
end 
// port_in_014[ 4 ]
initial
begin
	port_in_014[4] = 1'b0;
end 
// port_in_014[ 3 ]
initial
begin
	port_in_014[3] = 1'b1;
end 
// port_in_014[ 2 ]
initial
begin
	port_in_014[2] = 1'b1;
end 
// port_in_014[ 1 ]
initial
begin
	port_in_014[1] = 1'b1;
end 
// port_in_014[ 0 ]
initial
begin
	port_in_014[0] = 1'b0;
end 
// port_in_015[ 7 ]
initial
begin
	port_in_015[7] = 1'b0;
end 
// port_in_015[ 6 ]
initial
begin
	port_in_015[6] = 1'b0;
end 
// port_in_015[ 5 ]
initial
begin
	port_in_015[5] = 1'b0;
end 
// port_in_015[ 4 ]
initial
begin
	port_in_015[4] = 1'b0;
end 
// port_in_015[ 3 ]
initial
begin
	port_in_015[3] = 1'b1;
end 
// port_in_015[ 2 ]
initial
begin
	port_in_015[2] = 1'b1;
end 
// port_in_015[ 1 ]
initial
begin
	port_in_015[1] = 1'b1;
end 
// port_in_015[ 0 ]
initial
begin
	port_in_015[0] = 1'b1;
end 

Memory_Test_vlg_sample_tst tb_sample (
	.Address(Address),
	.clock(clock),
	.data_in1(data_in1),
	.port_in_0(port_in_0),
	.port_in_1(port_in_1),
	.port_in_2(port_in_2),
	.port_in_3(port_in_3),
	.port_in_4(port_in_4),
	.port_in_5(port_in_5),
	.port_in_6(port_in_6),
	.port_in_7(port_in_7),
	.port_in_8(port_in_8),
	.port_in_9(port_in_9),
	.port_in_010(port_in_010),
	.port_in_011(port_in_011),
	.port_in_012(port_in_012),
	.port_in_013(port_in_013),
	.port_in_014(port_in_014),
	.port_in_015(port_in_015),
	.reset(reset),
	.writen(writen),
	.sampler_tx(sampler)
);

Memory_Test_vlg_check_tst tb_out(
	.Display1(Display1),
	.Display2(Display2),
	.Display3(Display3),
	.Display4(Display4),
	.sampler_rx(sampler)
);
endmodule

